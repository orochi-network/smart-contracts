/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface GameContractFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployGameContract"
      | "isGameContractExist"
      | "owner"
      | "packingSalt"
      | "predictWalletAddress"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeImplementation"
      | "userCheck"
      | "userListAdd"
      | "userListCheck"
      | "userListRemove"
      | "userTotal"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameContractDeploy"
      | "OwnershipTransferred"
      | "UpgradeImplementation"
      | "UserListAdd"
      | "UserListRemove"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployGameContract",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameContractExist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packingSalt",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictWalletAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCheck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListAdd",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userListCheck",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userListRemove",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "userTotal", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "deployGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameContractExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packingSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userListAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTotal", data: BytesLike): Result;
}

export namespace GameContractDeployEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    ownerAddress: AddressLike,
    salt: BytesLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    ownerAddress: string,
    salt: string
  ];
  export interface OutputObject {
    contractAddress: string;
    ownerAddress: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradeImplementationEvent {
  export type InputTuple = [
    actor: AddressLike,
    oldImplementation: AddressLike,
    upgradeImplementation: AddressLike
  ];
  export type OutputTuple = [
    actor: string,
    oldImplementation: string,
    upgradeImplementation: string
  ];
  export interface OutputObject {
    actor: string;
    oldImplementation: string;
    upgradeImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserListAddEvent {
  export type InputTuple = [actor: AddressLike, totalAddedUser: BigNumberish];
  export type OutputTuple = [actor: string, totalAddedUser: bigint];
  export interface OutputObject {
    actor: string;
    totalAddedUser: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserListRemoveEvent {
  export type InputTuple = [actor: AddressLike, totalAddedUser: BigNumberish];
  export type OutputTuple = [actor: string, totalAddedUser: bigint];
  export interface OutputObject {
    actor: string;
    totalAddedUser: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameContractFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GameContractFactory;
  waitForDeployment(): Promise<this>;

  interface: GameContractFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployGameContract: TypedContractMethod<
    [gameContractOwner: AddressLike, salt: BigNumberish],
    [string],
    "nonpayable"
  >;

  isGameContractExist: TypedContractMethod<
    [gameContractAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  packingSalt: TypedContractMethod<
    [salt: BigNumberish, creatorAddress: AddressLike],
    [bigint],
    "view"
  >;

  predictWalletAddress: TypedContractMethod<
    [salt: BigNumberish, creatorAddress: AddressLike],
    [string],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeImplementation: TypedContractMethod<
    [newImplementation: AddressLike],
    [boolean],
    "nonpayable"
  >;

  userCheck: TypedContractMethod<[userToCheck: AddressLike], [boolean], "view">;

  userListAdd: TypedContractMethod<
    [userListToAdd: AddressLike[]],
    [void],
    "nonpayable"
  >;

  userListCheck: TypedContractMethod<
    [userListToCheck: AddressLike[]],
    [boolean[]],
    "view"
  >;

  userListRemove: TypedContractMethod<
    [userListToRemove: AddressLike[]],
    [void],
    "nonpayable"
  >;

  userTotal: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployGameContract"
  ): TypedContractMethod<
    [gameContractOwner: AddressLike, salt: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isGameContractExist"
  ): TypedContractMethod<[gameContractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "packingSalt"
  ): TypedContractMethod<
    [salt: BigNumberish, creatorAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictWalletAddress"
  ): TypedContractMethod<
    [salt: BigNumberish, creatorAddress: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeImplementation"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userCheck"
  ): TypedContractMethod<[userToCheck: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userListAdd"
  ): TypedContractMethod<[userListToAdd: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userListCheck"
  ): TypedContractMethod<[userListToCheck: AddressLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "userListRemove"
  ): TypedContractMethod<
    [userListToRemove: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userTotal"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "GameContractDeploy"
  ): TypedContractEvent<
    GameContractDeployEvent.InputTuple,
    GameContractDeployEvent.OutputTuple,
    GameContractDeployEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpgradeImplementation"
  ): TypedContractEvent<
    UpgradeImplementationEvent.InputTuple,
    UpgradeImplementationEvent.OutputTuple,
    UpgradeImplementationEvent.OutputObject
  >;
  getEvent(
    key: "UserListAdd"
  ): TypedContractEvent<
    UserListAddEvent.InputTuple,
    UserListAddEvent.OutputTuple,
    UserListAddEvent.OutputObject
  >;
  getEvent(
    key: "UserListRemove"
  ): TypedContractEvent<
    UserListRemoveEvent.InputTuple,
    UserListRemoveEvent.OutputTuple,
    UserListRemoveEvent.OutputObject
  >;

  filters: {
    "GameContractDeploy(address,address,bytes32)": TypedContractEvent<
      GameContractDeployEvent.InputTuple,
      GameContractDeployEvent.OutputTuple,
      GameContractDeployEvent.OutputObject
    >;
    GameContractDeploy: TypedContractEvent<
      GameContractDeployEvent.InputTuple,
      GameContractDeployEvent.OutputTuple,
      GameContractDeployEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpgradeImplementation(address,address,address)": TypedContractEvent<
      UpgradeImplementationEvent.InputTuple,
      UpgradeImplementationEvent.OutputTuple,
      UpgradeImplementationEvent.OutputObject
    >;
    UpgradeImplementation: TypedContractEvent<
      UpgradeImplementationEvent.InputTuple,
      UpgradeImplementationEvent.OutputTuple,
      UpgradeImplementationEvent.OutputObject
    >;

    "UserListAdd(address,uint256)": TypedContractEvent<
      UserListAddEvent.InputTuple,
      UserListAddEvent.OutputTuple,
      UserListAddEvent.OutputObject
    >;
    UserListAdd: TypedContractEvent<
      UserListAddEvent.InputTuple,
      UserListAddEvent.OutputTuple,
      UserListAddEvent.OutputObject
    >;

    "UserListRemove(address,uint256)": TypedContractEvent<
      UserListRemoveEvent.InputTuple,
      UserListRemoveEvent.OutputTuple,
      UserListRemoveEvent.OutputObject
    >;
    UserListRemove: TypedContractEvent<
      UserListRemoveEvent.InputTuple,
      UserListRemoveEvent.OutputTuple,
      UserListRemoveEvent.OutputObject
    >;
  };
}
