/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface OnTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claim"
      | "claimDaily"
      | "dailyCheckpointGet"
      | "dailyTokenClaimedGet"
      | "dailyTokenLimitGet"
      | "dailyUserClaimCountGet"
      | "decimals"
      | "decreaseAllowance"
      | "getRedeemState"
      | "increaseAllowance"
      | "mint"
      | "name"
      | "owner"
      | "proverGet"
      | "renounceOwnership"
      | "setDailyCheckpoint"
      | "setDailyTokenLimit"
      | "setProver"
      | "setTimeRestartDaily"
      | "symbol"
      | "timeRestartDailyGet"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DailyCheckpointSet"
      | "DailyPoolReset"
      | "DailyTimeSet"
      | "DailyTokenLimitSet"
      | "OwnershipTransferred"
      | "ProverSet"
      | "TokenClaim"
      | "TokenClaimDaily"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDaily",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyCheckpointGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyTokenClaimedGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyTokenLimitGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyUserClaimCountGet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "proverGet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyCheckpoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyTokenLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeRestartDaily",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeRestartDailyGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimDaily", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyCheckpointGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyTokenClaimedGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyTokenLimitGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyUserClaimCountGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proverGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyTokenLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimeRestartDaily",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeRestartDailyGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyCheckpointSetEvent {
  export type InputTuple = [oldTime: BigNumberish, newTime: BigNumberish];
  export type OutputTuple = [oldTime: bigint, newTime: bigint];
  export interface OutputObject {
    oldTime: bigint;
    newTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyPoolResetEvent {
  export type InputTuple = [
    claimCount: BigNumberish,
    oldTime: BigNumberish,
    newTime: BigNumberish
  ];
  export type OutputTuple = [
    claimCount: bigint,
    oldTime: bigint,
    newTime: bigint
  ];
  export interface OutputObject {
    claimCount: bigint;
    oldTime: bigint;
    newTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyTimeSetEvent {
  export type InputTuple = [oldTime: BigNumberish, newTime: BigNumberish];
  export type OutputTuple = [oldTime: bigint, newTime: bigint];
  export interface OutputObject {
    oldTime: bigint;
    newTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyTokenLimitSetEvent {
  export type InputTuple = [oldLimit: BigNumberish, newLimit: BigNumberish];
  export type OutputTuple = [oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProverSetEvent {
  export type InputTuple = [oldSigner: AddressLike, newSigner: AddressLike];
  export type OutputTuple = [oldSigner: string, newSigner: string];
  export interface OutputObject {
    oldSigner: string;
    newSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimEvent {
  export type InputTuple = [
    signature: BytesLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [signature: string, to: string, amount: bigint];
  export interface OutputObject {
    signature: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimDailyEvent {
  export type InputTuple = [
    signature: BytesLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [signature: string, to: string, amount: bigint];
  export interface OutputObject {
    signature: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OnToken extends BaseContract {
  connect(runner?: ContractRunner | null): OnToken;
  waitForDeployment(): Promise<this>;

  interface: OnTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claim: TypedContractMethod<
    [signature: BytesLike, amount: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimDaily: TypedContractMethod<
    [signature: BytesLike, amount: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;

  dailyCheckpointGet: TypedContractMethod<[], [bigint], "view">;

  dailyTokenClaimedGet: TypedContractMethod<[], [bigint], "view">;

  dailyTokenLimitGet: TypedContractMethod<[], [bigint], "view">;

  dailyUserClaimCountGet: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getRedeemState: TypedContractMethod<
    [signature: BytesLike],
    [boolean],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proverGet: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDailyCheckpoint: TypedContractMethod<
    [newTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDailyTokenLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProver: TypedContractMethod<
    [newProver: AddressLike],
    [void],
    "nonpayable"
  >;

  setTimeRestartDaily: TypedContractMethod<
    [newTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  timeRestartDailyGet: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [signature: BytesLike, amount: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimDaily"
  ): TypedContractMethod<
    [signature: BytesLike, amount: BigNumberish, salt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dailyCheckpointGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyTokenClaimedGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyTokenLimitGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyUserClaimCountGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRedeemState"
  ): TypedContractMethod<[signature: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proverGet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDailyCheckpoint"
  ): TypedContractMethod<[newTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDailyTokenLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProver"
  ): TypedContractMethod<[newProver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimeRestartDaily"
  ): TypedContractMethod<[newTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timeRestartDailyGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DailyCheckpointSet"
  ): TypedContractEvent<
    DailyCheckpointSetEvent.InputTuple,
    DailyCheckpointSetEvent.OutputTuple,
    DailyCheckpointSetEvent.OutputObject
  >;
  getEvent(
    key: "DailyPoolReset"
  ): TypedContractEvent<
    DailyPoolResetEvent.InputTuple,
    DailyPoolResetEvent.OutputTuple,
    DailyPoolResetEvent.OutputObject
  >;
  getEvent(
    key: "DailyTimeSet"
  ): TypedContractEvent<
    DailyTimeSetEvent.InputTuple,
    DailyTimeSetEvent.OutputTuple,
    DailyTimeSetEvent.OutputObject
  >;
  getEvent(
    key: "DailyTokenLimitSet"
  ): TypedContractEvent<
    DailyTokenLimitSetEvent.InputTuple,
    DailyTokenLimitSetEvent.OutputTuple,
    DailyTokenLimitSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProverSet"
  ): TypedContractEvent<
    ProverSetEvent.InputTuple,
    ProverSetEvent.OutputTuple,
    ProverSetEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaim"
  ): TypedContractEvent<
    TokenClaimEvent.InputTuple,
    TokenClaimEvent.OutputTuple,
    TokenClaimEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaimDaily"
  ): TypedContractEvent<
    TokenClaimDailyEvent.InputTuple,
    TokenClaimDailyEvent.OutputTuple,
    TokenClaimDailyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DailyCheckpointSet(uint64,uint64)": TypedContractEvent<
      DailyCheckpointSetEvent.InputTuple,
      DailyCheckpointSetEvent.OutputTuple,
      DailyCheckpointSetEvent.OutputObject
    >;
    DailyCheckpointSet: TypedContractEvent<
      DailyCheckpointSetEvent.InputTuple,
      DailyCheckpointSetEvent.OutputTuple,
      DailyCheckpointSetEvent.OutputObject
    >;

    "DailyPoolReset(uint64,uint256,uint256)": TypedContractEvent<
      DailyPoolResetEvent.InputTuple,
      DailyPoolResetEvent.OutputTuple,
      DailyPoolResetEvent.OutputObject
    >;
    DailyPoolReset: TypedContractEvent<
      DailyPoolResetEvent.InputTuple,
      DailyPoolResetEvent.OutputTuple,
      DailyPoolResetEvent.OutputObject
    >;

    "DailyTimeSet(uint64,uint64)": TypedContractEvent<
      DailyTimeSetEvent.InputTuple,
      DailyTimeSetEvent.OutputTuple,
      DailyTimeSetEvent.OutputObject
    >;
    DailyTimeSet: TypedContractEvent<
      DailyTimeSetEvent.InputTuple,
      DailyTimeSetEvent.OutputTuple,
      DailyTimeSetEvent.OutputObject
    >;

    "DailyTokenLimitSet(uint256,uint256)": TypedContractEvent<
      DailyTokenLimitSetEvent.InputTuple,
      DailyTokenLimitSetEvent.OutputTuple,
      DailyTokenLimitSetEvent.OutputObject
    >;
    DailyTokenLimitSet: TypedContractEvent<
      DailyTokenLimitSetEvent.InputTuple,
      DailyTokenLimitSetEvent.OutputTuple,
      DailyTokenLimitSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProverSet(address,address)": TypedContractEvent<
      ProverSetEvent.InputTuple,
      ProverSetEvent.OutputTuple,
      ProverSetEvent.OutputObject
    >;
    ProverSet: TypedContractEvent<
      ProverSetEvent.InputTuple,
      ProverSetEvent.OutputTuple,
      ProverSetEvent.OutputObject
    >;

    "TokenClaim(bytes32,address,uint256)": TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;
    TokenClaim: TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;

    "TokenClaimDaily(bytes32,address,uint256)": TypedContractEvent<
      TokenClaimDailyEvent.InputTuple,
      TokenClaimDailyEvent.OutputTuple,
      TokenClaimDailyEvent.OutputObject
    >;
    TokenClaimDaily: TypedContractEvent<
      TokenClaimDailyEvent.InputTuple,
      TokenClaimDailyEvent.OutputTuple,
      TokenClaimDailyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
