/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface OroNftInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "baseURISet"
      | "fcfsAdd"
      | "fcfsAmountGet"
      | "fcfsEndTimeGet"
      | "fcfsMint"
      | "fcfsMintPriceGet"
      | "fcfsMintPricesSet"
      | "fcfsRemove"
      | "fcfsStartTimeGet"
      | "fcfsSupplyGet"
      | "fcfsSupplySet"
      | "getApproved"
      | "guaranteeAdd"
      | "guaranteeAmountGet"
      | "guaranteeRemove"
      | "guaranteedEndTimeGet"
      | "guaranteedMint"
      | "guaranteedStartTimeGet"
      | "guaranteedSupplyGet"
      | "guaranteedSupplySet"
      | "isApprovedForAll"
      | "maxSupplyGet"
      | "name"
      | "owner"
      | "ownerOf"
      | "publicMint"
      | "publicMintPriceGet"
      | "publicMintPriceSet"
      | "publicStartTimeGet"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "salePhaseSetTimes"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenIndexGet"
      | "tokenURI"
      | "tokenURISet"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BaseURIUpdate"
      | "FcfsAdd"
      | "GuaranteeAdd"
      | "NftMint"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURISet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fcfsAdd",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsAmountGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsEndTimeGet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fcfsMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fcfsMintPriceGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsMintPricesSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsRemove",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsStartTimeGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsSupplyGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fcfsSupplySet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteeAdd",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteeAmountGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteeRemove",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteedEndTimeGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteedMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteedStartTimeGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteedSupplyGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guaranteedSupplySet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupplyGet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicMintPriceGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicMintPriceSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicStartTimeGet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "salePhaseSetTimes",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIndexGet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURISet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURISet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fcfsAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fcfsAmountGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fcfsEndTimeGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fcfsMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fcfsMintPriceGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fcfsMintPricesSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fcfsRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fcfsStartTimeGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fcfsSupplyGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fcfsSupplySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteeAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteeAmountGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteeRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedEndTimeGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedStartTimeGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedSupplyGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedSupplySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupplyGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicMintPriceGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicMintPriceSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicStartTimeGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salePhaseSetTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURISet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURIUpdateEvent {
  export type InputTuple = [newDefaultUri: string];
  export type OutputTuple = [newDefaultUri: string];
  export interface OutputObject {
    newDefaultUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FcfsAddEvent {
  export type InputTuple = [wallet: AddressLike, amount: BigNumberish];
  export type OutputTuple = [wallet: string, amount: bigint];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuaranteeAddEvent {
  export type InputTuple = [wallet: AddressLike, amount: BigNumberish];
  export type OutputTuple = [wallet: string, amount: bigint];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NftMintEvent {
  export type InputTuple = [minter: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [minter: string, tokenId: bigint];
  export interface OutputObject {
    minter: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OroNft extends BaseContract {
  connect(runner?: ContractRunner | null): OroNft;
  waitForDeployment(): Promise<this>;

  interface: OroNftInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURISet: TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;

  fcfsAdd: TypedContractMethod<[wallets: AddressLike[]], [void], "nonpayable">;

  fcfsAmountGet: TypedContractMethod<[], [bigint], "view">;

  fcfsEndTimeGet: TypedContractMethod<[], [bigint], "view">;

  fcfsMint: TypedContractMethod<[], [void], "payable">;

  fcfsMintPriceGet: TypedContractMethod<[], [bigint], "view">;

  fcfsMintPricesSet: TypedContractMethod<
    [_price: BigNumberish],
    [void],
    "nonpayable"
  >;

  fcfsRemove: TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;

  fcfsStartTimeGet: TypedContractMethod<[], [bigint], "view">;

  fcfsSupplyGet: TypedContractMethod<[], [bigint], "view">;

  fcfsSupplySet: TypedContractMethod<
    [_newFcfsSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  guaranteeAdd: TypedContractMethod<
    [wallets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  guaranteeAmountGet: TypedContractMethod<[], [bigint], "view">;

  guaranteeRemove: TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  guaranteedEndTimeGet: TypedContractMethod<[], [bigint], "view">;

  guaranteedMint: TypedContractMethod<[], [void], "nonpayable">;

  guaranteedStartTimeGet: TypedContractMethod<[], [bigint], "view">;

  guaranteedSupplyGet: TypedContractMethod<[], [bigint], "view">;

  guaranteedSupplySet: TypedContractMethod<
    [_newGuaranteeSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  maxSupplyGet: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  publicMint: TypedContractMethod<[], [void], "payable">;

  publicMintPriceGet: TypedContractMethod<[], [bigint], "view">;

  publicMintPriceSet: TypedContractMethod<
    [_price: BigNumberish],
    [void],
    "nonpayable"
  >;

  publicStartTimeGet: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  salePhaseSetTimes: TypedContractMethod<
    [
      _guaranteedStartTime: BigNumberish,
      _guaranteedEndTime: BigNumberish,
      _fcfsStartTime: BigNumberish,
      _fcfsEndTime: BigNumberish,
      _publicStartTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenIndexGet: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  tokenURISet: TypedContractMethod<
    [tokenId: BigNumberish, uri: string],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURISet"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fcfsAdd"
  ): TypedContractMethod<[wallets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fcfsAmountGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fcfsEndTimeGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fcfsMint"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "fcfsMintPriceGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fcfsMintPricesSet"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fcfsRemove"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fcfsStartTimeGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fcfsSupplyGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fcfsSupplySet"
  ): TypedContractMethod<[_newFcfsSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "guaranteeAdd"
  ): TypedContractMethod<[wallets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "guaranteeAmountGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guaranteeRemove"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "guaranteedEndTimeGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guaranteedMint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "guaranteedStartTimeGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guaranteedSupplyGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guaranteedSupplySet"
  ): TypedContractMethod<
    [_newGuaranteeSupply: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxSupplyGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicMint"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "publicMintPriceGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicMintPriceSet"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "publicStartTimeGet"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "salePhaseSetTimes"
  ): TypedContractMethod<
    [
      _guaranteedStartTime: BigNumberish,
      _guaranteedEndTime: BigNumberish,
      _fcfsStartTime: BigNumberish,
      _fcfsEndTime: BigNumberish,
      _publicStartTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenIndexGet"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURISet"
  ): TypedContractMethod<
    [tokenId: BigNumberish, uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BaseURIUpdate"
  ): TypedContractEvent<
    BaseURIUpdateEvent.InputTuple,
    BaseURIUpdateEvent.OutputTuple,
    BaseURIUpdateEvent.OutputObject
  >;
  getEvent(
    key: "FcfsAdd"
  ): TypedContractEvent<
    FcfsAddEvent.InputTuple,
    FcfsAddEvent.OutputTuple,
    FcfsAddEvent.OutputObject
  >;
  getEvent(
    key: "GuaranteeAdd"
  ): TypedContractEvent<
    GuaranteeAddEvent.InputTuple,
    GuaranteeAddEvent.OutputTuple,
    GuaranteeAddEvent.OutputObject
  >;
  getEvent(
    key: "NftMint"
  ): TypedContractEvent<
    NftMintEvent.InputTuple,
    NftMintEvent.OutputTuple,
    NftMintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BaseURIUpdate(string)": TypedContractEvent<
      BaseURIUpdateEvent.InputTuple,
      BaseURIUpdateEvent.OutputTuple,
      BaseURIUpdateEvent.OutputObject
    >;
    BaseURIUpdate: TypedContractEvent<
      BaseURIUpdateEvent.InputTuple,
      BaseURIUpdateEvent.OutputTuple,
      BaseURIUpdateEvent.OutputObject
    >;

    "FcfsAdd(address,uint256)": TypedContractEvent<
      FcfsAddEvent.InputTuple,
      FcfsAddEvent.OutputTuple,
      FcfsAddEvent.OutputObject
    >;
    FcfsAdd: TypedContractEvent<
      FcfsAddEvent.InputTuple,
      FcfsAddEvent.OutputTuple,
      FcfsAddEvent.OutputObject
    >;

    "GuaranteeAdd(address,uint256)": TypedContractEvent<
      GuaranteeAddEvent.InputTuple,
      GuaranteeAddEvent.OutputTuple,
      GuaranteeAddEvent.OutputObject
    >;
    GuaranteeAdd: TypedContractEvent<
      GuaranteeAddEvent.InputTuple,
      GuaranteeAddEvent.OutputTuple,
      GuaranteeAddEvent.OutputObject
    >;

    "NftMint(address,uint256)": TypedContractEvent<
      NftMintEvent.InputTuple,
      NftMintEvent.OutputTuple,
      NftMintEvent.OutputObject
    >;
    NftMint: TypedContractEvent<
      NftMintEvent.InputTuple,
      NftMintEvent.OutputTuple,
      NftMintEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
